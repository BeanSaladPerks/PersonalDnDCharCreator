# -*- coding: utf-8 -*-
"""Character Creator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tupmzJLi7ou4lh47pO3bwq4lz6yYbyjK

Api at: https://www.dnd5eapi.co/

Specific dataset used at: https://github.com/5e-bits/5e-database/archive/refs/tags/v3.3.3.zip
"""

logFile = open("log.txt","a")
import time
import datetime
logFile.write(f"Execution starting at {datetime.datetime.now()}:\n")

manualSelect = False

import os
import sys

try:
  import kivy
except ModuleNotFoundError:
  logFile.write("Kivy not found. Installing with Pip.\n")
  os.system("pip3 install kivy")
  import kivy
from kivy.app import App
from kivy.uix.widget import Widget
from kivy.uix.dropdown import DropDown
from kivy.uix.button import Button
from kivy.base import runTouchApp

import json
import urllib
import zipfile

SrcHeaderList = ["Ability-Scores", "Alignments", "Backgrounds", "Classes", "Conditions", "Damage-Types", "Equipment", "Feats", "Features", "Languages", "Magic-Items", "Magic-Schools", "Monsters", "Proficiencies", "Races", "Rule-Sections", "Rules", "Skills", "Spells", "Subclasses", "Subraces", "Traits", "Weapon-Properties"]
srcData = {}

if False in [os.path.isfile(f"5e-database-3.3.3/src/{itemType}.json") for itemType in SrcHeaderList]: #Switched to if statement as the file not existing is the only possible issue
  logFile.write("Some database files were missing. Attempting to reinstall directory from \"https://github.com/5e-bits/5e-database/archive/refs/tags/v3.3.3.zip\". ")
  if not os.path.isfile("5e-database-3.3.3.zip"):
    try:
      urllib.request.urlretrieve("https://github.com/5e-bits/5e-database/archive/refs/tags/v3.3.3.zip","5e-database-3.3.3.zip")
    except Exception as e:
      logFile.write(f"\n{str(e)} No source files can be found. Starting in manual select mode.\n ")
      manualSelect=True
  else:
    logFile.write("Zip file already exists, will use that instead of installing. ")
  logFile.write("Unzipping.\n")
  zipfile.ZipFile("5e-database-3.3.3.zip","r").extractall()

for fileName in SrcHeaderList: #Copied loading here instead
  try:
    baseData = json.load(open(f"5e-database-3.3.3/src/5e-SRD-{fileName}.json", "r"))
  except MemoryError:
    logFile.write("Out of memory. Quitting to not crash entire computer.\n")
    sys.exit()
  baseDataDict = {}
  for item in baseData:
    item["sourcebook"]="phb"
    baseDataDict[item["index"]] = item
  srcData[fileName] = baseDataDict
del baseData, baseDataDict

envWidget = Widget()
testdropdown = DropDown()
fileButton = Button(text="File",size_hint_y=None,height=10)

for i in range(10):
  btn = Button(text="Value %d" % i,size_hint_y=None,height=44)
  btn.bind(on_release=lambda btn: testdropdown.select(btn.text))
  testdropdown.add_widget(btn)

mainbutton= Button(text="Hello",size_hint=(None,None))
mainbutton.bind(on_release=testdropdown.open)
testdropdown.bind(on_select=lambda instance,x:setattr(mainbutton,"text",x))
runTouchApp(envWidget)

"""
def makeCustomContentJson(JsonPath = "",data = None) -> None:
  if data == None:
    raise ValueError("No Data was given.")
  customJsonFile = open(JsonPath,"w")
  match data[category]:
    case "Ability-Scores":
      pass
    case "Alignments":
      pass
    case "Backgrounds":
      pass
    case "Classes":
      pass
    case "Conditions":
      pass
    case "Damage-Types":
      pass
    case "Equipment":
      pass
    case "Feats":
      pass
    case "Features":
      pass
    case "Languages":
      pass
    case "Magic-Items":
      pass
    case "Magic-Schools":
      pass
    case "Monsters":
      pass
    case "Races":
      pass
    case "Rule-Sections":
      pass
    case "Rules":
      pass
    case "Skills":
      pass
    case "Spells":
      pass
    case "Subclasses":
      pass
    case "Subraces":
      pass
    case "Traits":
      pass
    case "Weapon-Properties":
"""
#Use this code whenever accessing json data in case some of it goes missing or a file is deleted accidentally.
"""
try:
  the actual code
except KeyError as k:
  logFile.write(f"{k}. Key read failed so software shutting down.")
  sys.exit()
"""